/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author Ammar Shadiq
 *
 */

package org.emje.treehtmlparse.xpathtree.panel;

import org.emje.treehtmlparse.xpathtree.nodes.Field;
import org.emje.treehtmlparse.xpathtree.nodes.XPathTreeFieldNode;

public class XPathFieldItem extends javax.swing.JPanel {

    /** Creates new form XpathItemEntryAddButton */
    public XPathFieldItem() {
        initComponents();
    }

    public void setFieldItem(XPathTreeFieldNode field) {
        this.field = field;
        fieldNameTextField.setText(field.getFieldName());
        int DelimiterLength = this.field.getEntryDelimiter().length();
        if (field.getFieldType().equalsIgnoreCase(XPathTreeFieldNode.CONTINUOUS_TEXT)){
                // Continous Text
                typeComboBox.setSelectedIndex(0);
                System.out.println("delimiter:["+this.field.getEntryDelimiter()+"]");
                if (DelimiterLength == 0) { // Empty Delimiter []
                    perEntryDelimiterComboBox.setSelectedIndex(8);
                }  else if (this.field.getEntryDelimiter().contentEquals(",")) { // Comma [,]
                    perEntryDelimiterComboBox.setSelectedIndex(1);
                } else if (this.field.getEntryDelimiter().equalsIgnoreCase(", ")) { // Comma & Space [, ]
                    perEntryDelimiterComboBox.setSelectedIndex(2);
                } else if (this.field.getEntryDelimiter().contentEquals("\t")) { // Tab [\t]
                  System.out.println("masuk tab");
                    perEntryDelimiterComboBox.setSelectedIndex(3);
                } else if (this.field.getEntryDelimiter().contentEquals("\n")) { // New Line [\n]
                  System.out.println("masuk newline");
                    perEntryDelimiterComboBox.setSelectedIndex(4);
                } else if (this.field.getEntryDelimiter().contentEquals(";")) { // Semi Colon [;]
                    perEntryDelimiterComboBox.setSelectedIndex(5);
                } else if (this.field.getEntryDelimiter().contentEquals(":")) { // Colon [:]
                    perEntryDelimiterComboBox.setSelectedIndex(6);
                } else if (this.field.getEntryDelimiter().contentEquals("-")) { // Dash [-]
                    perEntryDelimiterComboBox.setSelectedIndex(7);
                } else if (this.field.getEntryDelimiter().contentEquals(" ")) { //Space [\s]
                    perEntryDelimiterComboBox.setSelectedIndex(0);
                    System.out.println("masuk space");
                } else { // Custom ...
                    perEntryDelimiterComboBox.setSelectedIndex(9);
                }
        }
        else if (field.getFieldType().equalsIgnoreCase(XPathTreeFieldNode.SEGMENTED_TEXT)){
                // Segmented Text
                typeComboBox.setSelectedIndex(1);
                perEntryDelimiterLabel.setVisible(false);
                perEntryDelimiterComboBox.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setVisible(false);
                this.field.setEntryDelimiter("");
        }
        else if (field.getFieldType().equalsIgnoreCase(XPathTreeFieldNode.OUTLINKS)){
                // Segmented Text
                typeComboBox.setSelectedIndex(2);
                perEntryDelimiterLabel.setVisible(false);
                perEntryDelimiterComboBox.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setVisible(false);
                this.field.setEntryDelimiter("");
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fieldLabel = new javax.swing.JLabel();
        fieldNameTextField = new javax.swing.JTextField();
        typeLabel = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox();
        perEntryDelimiterLabel = new javax.swing.JLabel();
        perEntryDelimiterTextField = new javax.swing.JTextField();
        perEntryDelimiterComboBox = new javax.swing.JComboBox();
        customDelimiterLabel = new javax.swing.JLabel();

        setBorder(null);
        setName("Form"); // NOI18N

        fieldLabel.setText(org.openide.util.NbBundle.getMessage(XPathFieldItem.class, "XPathFieldItem.fieldLabel.text")); // NOI18N
        fieldLabel.setName("fieldLabel"); // NOI18N

        fieldNameTextField.setText(org.openide.util.NbBundle.getMessage(XPathFieldItem.class, "XPathFieldItem.fieldNameTextField.text")); // NOI18N
        fieldNameTextField.setName("fieldNameTextField"); // NOI18N
        fieldNameTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                fieldNameTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                fieldNameTextFieldFocusLost(evt);
            }
        });
        fieldNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldNameTextFieldKeyTyped(evt);
            }
        });

        typeLabel.setText(org.openide.util.NbBundle.getMessage(XPathFieldItem.class, "XPathFieldItem.typeLabel.text")); // NOI18N
        typeLabel.setName("typeLabel"); // NOI18N

        typeComboBox.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Continuos Text", "Segmented Text", "Outlinks" }));
        typeComboBox.setName("typeComboBox"); // NOI18N
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        perEntryDelimiterLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        perEntryDelimiterLabel.setText(org.openide.util.NbBundle.getMessage(XPathFieldItem.class, "XPathFieldItem.perEntryDelimiterLabel.text_1")); // NOI18N
        perEntryDelimiterLabel.setName("perEntryDelimiterLabel"); // NOI18N

        perEntryDelimiterTextField.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        perEntryDelimiterTextField.setText(org.openide.util.NbBundle.getMessage(XPathFieldItem.class, "XPathFieldItem.perEntryDelimiterTextField.text_1")); // NOI18N
        perEntryDelimiterTextField.setName("perEntryDelimiterTextField"); // NOI18N
        perEntryDelimiterTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                perEntryDelimiterTextFieldKeyTyped(evt);
            }
        });

        perEntryDelimiterComboBox.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        perEntryDelimiterComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Space [ ]", "Comma [,]", "Comma & Space [, ]", "Tab [\\t]", "New Line [\\n]", "Semi Colon [;]", "Colon [:]", "Dash [-]", "Empty Delimiter []", "Custom ..." }));
        perEntryDelimiterComboBox.setName("perEntryDelimiterComboBox"); // NOI18N
        perEntryDelimiterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                perEntryDelimiterComboBoxActionPerformed(evt);
            }
        });

        customDelimiterLabel.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        customDelimiterLabel.setText(org.openide.util.NbBundle.getMessage(XPathFieldItem.class, "XPathFieldItem.customDelimiterLabel.text")); // NOI18N
        customDelimiterLabel.setName("customDelimiterLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fieldLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(typeLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perEntryDelimiterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perEntryDelimiterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(customDelimiterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(perEntryDelimiterTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                    .addComponent(fieldNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldLabel)
                    .addComponent(fieldNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(perEntryDelimiterLabel)
                    .addComponent(perEntryDelimiterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(customDelimiterLabel)
                    .addComponent(perEntryDelimiterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {perEntryDelimiterComboBox, perEntryDelimiterTextField, typeComboBox});

    }// </editor-fold>//GEN-END:initComponents

    private void fieldNameTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNameTextFieldFocusGained
        if(fieldNameTextField.getText().equalsIgnoreCase(
                org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathFieldItem.fieldNameTextField.text")))
            fieldNameTextField.setText("");
    }//GEN-LAST:event_fieldNameTextFieldFocusGained

    private void fieldNameTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_fieldNameTextFieldFocusLost
        if (fieldNameTextField.getText().isEmpty()) {
            this.field.setFieldName("");
            fieldNameTextField.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathFieldItem.fieldNameTextField.text"));
        } else {
            this.field.setFieldName(fieldNameTextField.getText());
        }
    }//GEN-LAST:event_fieldNameTextFieldFocusLost

    private void fieldNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldNameTextFieldKeyTyped
        if(Character.isISOControl(evt.getKeyChar())){
            this.field.setFieldName(fieldNameTextField.getText());
        } else {
            this.field.setFieldName(fieldNameTextField.getText()+evt.getKeyChar());
        }
        this.xPathTree.getModel().valueForPathChanged(this.xPathTree.getSelectionPath(), this.field);
    }//GEN-LAST:event_fieldNameTextFieldKeyTyped

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        switch (typeComboBox.getSelectedIndex()) {
            case 0:
                // Continous Text
                perEntryDelimiterLabel.setVisible(true);
                perEntryDelimiterComboBox.setVisible(true);
                customDelimiterLabel.setVisible(true);
                perEntryDelimiterTextField.setVisible(true);
                this.field.setFieldType(Field.CONTINUOUS_TEXT);
                break;
            case 1:
                // Segmented Text
                perEntryDelimiterLabel.setVisible(false);
                perEntryDelimiterComboBox.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setVisible(false);
                this.field.setFieldType(Field.SEGMENTED_TEXT);
                this.field.setEntryDelimiter("");
                break;
            case 2:
                // Outlinks
                perEntryDelimiterLabel.setVisible(false);
                perEntryDelimiterComboBox.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setVisible(false);
                this.field.setFieldType(Field.OUTLINKS);
                this.field.setEntryDelimiter("");
                break;
        }
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void perEntryDelimiterTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_perEntryDelimiterTextFieldKeyTyped
        if(Character.isISOControl(evt.getKeyChar())){
            this.field.setEntryDelimiter(perEntryDelimiterTextField.getText());
        } else {
            this.field.setEntryDelimiter(perEntryDelimiterTextField.getText() + evt.getKeyChar());
        }
    }//GEN-LAST:event_perEntryDelimiterTextFieldKeyTyped

    private void perEntryDelimiterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_perEntryDelimiterComboBoxActionPerformed
        switch (perEntryDelimiterComboBox.getSelectedIndex()){
            case 0: //Space [\s]
                perEntryDelimiterTextField.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setText(" ");
                this.field.setEntryDelimiter(" ");
                break;
            case 1: // Comma [,]
                perEntryDelimiterTextField.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setText(",");
                this.field.setEntryDelimiter(",");
                break;
            case 2: // Comma & Space [, ]
                perEntryDelimiterTextField.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setText(", ");
                this.field.setEntryDelimiter(", ");
                break;
            case 3: // Tab [\t]
                perEntryDelimiterTextField.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setText("\t");
                this.field.setEntryDelimiter("\t");
                break;
            case 4: // New Line [\n]
                perEntryDelimiterTextField.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setText("\n");
                this.field.setEntryDelimiter("\n");
                break;
            case 5: // Semi Colon [;]
                perEntryDelimiterTextField.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setText(";");
                this.field.setEntryDelimiter(";");
                break;
            case 6: // Colon [:]
                perEntryDelimiterTextField.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setText(":");
                this.field.setEntryDelimiter(":");
                break;
            case 7: // Dash [-]
                perEntryDelimiterTextField.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setText("-");
                this.field.setEntryDelimiter("-");
                break;
            case 8: // Empty Delimiter []
                perEntryDelimiterTextField.setVisible(false);
                customDelimiterLabel.setVisible(false);
                perEntryDelimiterTextField.setText("");
                this.field.setEntryDelimiter("");
                break;
            case 9: // Custom ...
                perEntryDelimiterTextField.setVisible(true);
                customDelimiterLabel.setVisible(true);
                perEntryDelimiterTextField.setText(this.field.getEntryDelimiter());
                revalidate();
                break;
        }
    }//GEN-LAST:event_perEntryDelimiterComboBoxActionPerformed

    public void setXPathTree(javax.swing.JTree xPathTree){
        this.xPathTree = xPathTree;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel customDelimiterLabel;
    private javax.swing.JLabel fieldLabel;
    private javax.swing.JTextField fieldNameTextField;
    private javax.swing.JComboBox perEntryDelimiterComboBox;
    private javax.swing.JLabel perEntryDelimiterLabel;
    private javax.swing.JTextField perEntryDelimiterTextField;
    private javax.swing.JComboBox typeComboBox;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables

    private XPathTreeFieldNode field;
    private javax.swing.JTree xPathTree;
}
