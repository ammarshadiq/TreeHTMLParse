/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author Ammar Shadiq
 *
 */

package org.emje.treehtmlparse.xpathtree.panel;

import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.namespace.QName;
import javax.xml.xpath.XPathConstants;
import org.emje.treehtmlparse.TreeHTMLParseApp;
import org.w3c.dom.NodeList;
import org.emje.treehtmlparse.parser.HtmlParse;
import org.emje.treehtmlparse.xpathtree.nodes.XPathTreeEntryNode;

public class XPathEntryItem extends javax.swing.JPanel {

    private HtmlParse parser;

    /** Creates new form XPathEntryItem */
    public XPathEntryItem() {
        initComponents();
    }

    public void setEntryItem(XPathTreeEntryNode entry){
        this.entry = entry;
        this.xPathExpressionTextField.setText(entry.getxPathExpression());
        this.xPathReturnTypeCombo.setSelectedItem(entry.getExpressionType());
        if(this.entry.isContainsResult()){
            if(this.entry.getExpressionType().equals(XPathTreeEntryNode.XPATH_NODESET_ENTRY)){
                applyNodeSetTableModel();
                DefaultTableModel modelTabel = (DefaultTableModel) resultTable.getModel();
                for(int i =0; i< entry.getResultList().length; i++){
                    modelTabel.addRow(new Object[]{entry.getResultList()[i]});
                }
                resultScrollPane.setViewportView(resultTable);
                resultTable.repaint();
            } else if (this.entry.getExpressionType().equals(XPathTreeEntryNode.XPATH_OUTLINK_NODESET_ENTRY)) {
                applyOutlinksNodeSetTableModel();
                DefaultTableModel modelTabel = (DefaultTableModel) resultTable.getModel();
                for (int i = 0; i < entry.getResultTable().length; i++) {
                    modelTabel.addRow(new Object[]{entry.getResultTable()[i][0], entry.getResultTable()[i][1]});
                }
                resultScrollPane.setViewportView(resultTable);
                resultTable.repaint();
            } else {
                resultTextArea.setText(entry.getResultString());
                resultScrollPane.setViewportView(resultTextArea);
            }
        }
        else{
             resultScrollPane.setViewportView(null);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        resultTable = new javax.swing.JTable();
        resultTextArea = new javax.swing.JTextArea();
        xPathExpressionTextField = new javax.swing.JTextField();
        expressionLabel = new javax.swing.JLabel();
        resultScrollPane = new javax.swing.JScrollPane();
        xPathReturnTypeCombo = new javax.swing.JComboBox();
        xPathEvaluateButton = new javax.swing.JButton();
        normalizedLabel1 = new javax.swing.JLabel();
        normalizedLabel2 = new javax.swing.JLabel();
        openExpressionCustomEditorButton = new javax.swing.JButton();

        resultTable.setBorder(null);
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "URL", "Anchor"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        resultTable.setName("NodeSetResultTable");

        resultTextArea.setColumns(20);
        resultTextArea.setRows(5);
        resultTextArea.setName("resultTextArea"); // NOI18N

        setBorder(null);
        setName("Form"); // NOI18N

        xPathExpressionTextField.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.xPathExpressionTextField.text")); // NOI18N
        xPathExpressionTextField.setName("xPathExpressionTextField"); // NOI18N
        xPathExpressionTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xPathExpressionTextFieldActionPerformed(evt);
            }
        });
        xPathExpressionTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                xPathExpressionTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                xPathExpressionTextFieldFocusLost(evt);
            }
        });
        xPathExpressionTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                xPathExpressionTextFieldKeyTyped(evt);
            }
        });

        expressionLabel.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.expressionLabel.text")); // NOI18N
        expressionLabel.setName("expressionLabel"); // NOI18N

        resultScrollPane.setMinimumSize(new java.awt.Dimension(29, 58));
        resultScrollPane.setName("resultScrollPane"); // NOI18N

        xPathReturnTypeCombo.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        xPathReturnTypeCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "xpath.string", "xpath.node", "xpath.nodeset", "xpath.number", "xpath.boolean", "xpath.string.normalized", "xpath.outlink.nodeset", "plain.string" }));
        xPathReturnTypeCombo.setName("xPathReturnTypeCombo"); // NOI18N
        xPathReturnTypeCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xPathReturnTypeComboActionPerformed(evt);
            }
        });

        xPathEvaluateButton.setFont(new java.awt.Font("DejaVu Sans", 0, 12)); // NOI18N
        xPathEvaluateButton.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.xPathEvaluateButton.text")); // NOI18N
        xPathEvaluateButton.setName("xPathEvaluateButton"); // NOI18N
        xPathEvaluateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xPathEvaluateButtonActionPerformed(evt);
            }
        });

        normalizedLabel1.setFont(new java.awt.Font("DejaVu Sans", 3, 12)); // NOI18N
        normalizedLabel1.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.normalizedLabel1.text")); // NOI18N
        normalizedLabel1.setName("normalizedLabel1"); // NOI18N
        normalizedLabel1.setVisible(false);

        normalizedLabel2.setFont(new java.awt.Font("DejaVu Sans", 3, 12)); // NOI18N
        normalizedLabel2.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.normalizedLabel2.text")); // NOI18N
        normalizedLabel2.setName("normalizedLabel2"); // NOI18N

        openExpressionCustomEditorButton.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        openExpressionCustomEditorButton.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.openExpressionCustomEditorButton.text")); // NOI18N
        openExpressionCustomEditorButton.setToolTipText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.openExpressionCustomEditorButton.toolTipText")); // NOI18N
        openExpressionCustomEditorButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(160, 160, 160), 1, true));
        openExpressionCustomEditorButton.setFocusable(false);
        openExpressionCustomEditorButton.setIconTextGap(0);
        openExpressionCustomEditorButton.setName("openExpressionCustomEditorButton"); // NOI18N
        openExpressionCustomEditorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openExpressionCustomEditorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(expressionLabel)
                        .addGap(1, 1, 1)
                        .addComponent(normalizedLabel1)
                        .addGap(1, 1, 1)
                        .addComponent(xPathExpressionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                        .addGap(1, 1, 1)
                        .addComponent(normalizedLabel2)
                        .addGap(1, 1, 1)
                        .addComponent(openExpressionCustomEditorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xPathReturnTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(xPathEvaluateButton))
                    .addComponent(resultScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 717, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(expressionLabel)
                    .addComponent(xPathExpressionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xPathReturnTypeCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(xPathEvaluateButton)
                    .addComponent(normalizedLabel1)
                    .addComponent(normalizedLabel2)
                    .addComponent(openExpressionCustomEditorButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void xPathEvaluateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xPathEvaluateButtonActionPerformed
        if(parser == null){
            JOptionPane.showMessageDialog(null, "No document have parsed, please parse one...", "Null Parser", JOptionPane.ERROR_MESSAGE);
        } else {
            // Evaluate XPath Expression with different returnType
            String XPathExpression = xPathExpressionTextField.getText();
            QName returnType = null;
            Object xPathResult = null;
            Object xPathResultOutlinkAnchor = null;
            // <editor-fold defaultstate="collapsed" desc="Switch XPath Expression Return Type">
            switch (xPathReturnTypeCombo.getSelectedIndex()) {
                case 0:
                    returnType = XPathConstants.STRING;
                    xPathResult = parser.evaluateXPathExpression(XPathExpression, returnType);
                    break;
                case 1:
                    returnType = XPathConstants.NODE;
                    xPathResult = parser.evaluateXPathExpression(XPathExpression, returnType);
                    break;
                case 2:
                    returnType = XPathConstants.NODESET;
                    xPathResult = parser.evaluateXPathExpression(XPathExpression, returnType);
                    break;
                case 3:
                    returnType = XPathConstants.NUMBER;
                    xPathResult = parser.evaluateXPathExpression(XPathExpression, returnType);
                    break;
                case 4:
                    returnType = XPathConstants.BOOLEAN;
                    xPathResult = parser.evaluateXPathExpression(XPathExpression, returnType);
                    break;
                case 5:
                    returnType = XPathConstants.STRING;
                    xPathResult = parser.evaluateXPathExpression("normalize-space(" + XPathExpression + ")", returnType);
                    break;
                case 6:
                    returnType = XPathConstants.NODESET;
                    if (XPathExpression.endsWith("/@href")) {
                        XPathExpression = XPathExpression.substring(0, XPathExpression.length() - 6);
                    }
                    xPathResult = parser.evaluateXPathExpression(XPathExpression + "/@href", returnType);
                    xPathResultOutlinkAnchor = parser.evaluateXPathExpression(XPathExpression + "/text()", returnType);
                    break;
            }// </editor-fold>
            if(xPathResult != null){
                entry.setContainsResult(true);
                // <editor-fold defaultstate="collapsed" desc="XPATH_OUTLINK_NODESET_ENTRY">
                if (xPathReturnTypeCombo.getSelectedItem().toString().equals(XPathTreeEntryNode.XPATH_OUTLINK_NODESET_ENTRY)) {
                    NodeList list = (NodeList) xPathResult;
                    applyOutlinksNodeSetTableModel();
                    DefaultTableModel modelTabel = (DefaultTableModel) resultTable.getModel();

                    ArrayList<String> urlArrayList = new ArrayList<String>();
                    ArrayList<String> anchorArrayList = new ArrayList<String>();

                    // fill data
                    if (xPathResultOutlinkAnchor != null) {
                        NodeList anchorList = (NodeList) xPathResultOutlinkAnchor;
                        for (int i = 0; i < list.getLength(); i++) {
                            String value = list.item(i).getNodeValue();
                            String anchorValue = "  ";
                            if (i < anchorList.getLength()) {
                                anchorValue = anchorList.item(i).getNodeValue().isEmpty() ? anchorList.item(i).getNodeValue() : "";

                            }
                            if (!value.matches("\\s+")) {
                                value = list.item(i).getNodeValue().replaceAll("\\s+", " "); // normalize space
                                if (!anchorValue.matches("\\s+")) {
                                    anchorValue = anchorList.item(i).getNodeValue().replaceAll("\\s+", " "); // normalize space
                                    modelTabel.addRow(new Object[]{value, anchorValue});
                                    urlArrayList.add(value); anchorArrayList.add(anchorValue);
                                } else {
                                    modelTabel.addRow(new Object[]{value, ""});
                                    urlArrayList.add(value); anchorArrayList.add("");
                                }
                            }
                        }
                    } else {
                        for (int i = 0; i < list.getLength(); i++) {
                            String value = list.item(i).getNodeValue();
                            if (!value.matches("\\s+")) {
                                value = list.item(i).getNodeValue().replaceAll("\\s+", " "); // normalize space
                                modelTabel.addRow(new Object[]{value, ""});
                                urlArrayList.add(value); anchorArrayList.add("");
                            }
                        }
                    }
                    String[][] OutlinksTable = new String[urlArrayList.size()][2];
                    for (int k =0; k < urlArrayList.size(); k++){
                        OutlinksTable[k][0] = (String) urlArrayList.get(k);
                        OutlinksTable[k][1] = (String) anchorArrayList.get(k);
                    }
                    entry.setResultTable(OutlinksTable);
                    resultTable.setModel(modelTabel) ;
                    resultScrollPane .setViewportView(resultTable);
                    resultTable.repaint();
                }// </editor-fold>
                // <editor-fold defaultstate="collapsed" desc="XPATH_NODESET_ENTRY">
                else if (xPathReturnTypeCombo.getSelectedItem().toString().equals(XPathTreeEntryNode.XPATH_NODESET_ENTRY)) {
                    NodeList list = (NodeList) xPathResult;
                    applyNodeSetTableModel();
                    DefaultTableModel modelTabel = (DefaultTableModel) resultTable.getModel();
                    ArrayList<String> urlArrayList = new ArrayList<String>();

                    // fill data
                    for (int i = 0; i < list.getLength(); i++) {
                        String value = list.item(i).getNodeValue();
                        if (value != null && !value.matches("\\s+")) {
                            value = list.item(i).getNodeValue().replaceAll("\\s+", " "); // normalize space
                            urlArrayList.add(value);
                            modelTabel.addRow(new Object[]{value});
                        }
                    }
                    String[] resultList = new String[urlArrayList.size()];
                    for (int k = 0; k < urlArrayList.size(); k++) {
                        resultList[k] = (String) urlArrayList.get(k);
                    }
                    entry.setResultList(resultList);
                    resultTable.setModel(modelTabel);
                    resultScrollPane.setViewportView(resultTable);
                }// </editor-fold>
                else {
                    entry.setResultString(xPathResult.toString());
                    resultTextArea.setText(xPathResult.toString());
                    resultScrollPane.setViewportView(resultTextArea);
                }
            } else {
                resultScrollPane.setViewportView(null);
            }
        }
    }//GEN-LAST:event_xPathEvaluateButtonActionPerformed

    private void xPathExpressionTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xPathExpressionTextFieldActionPerformed
        xPathEvaluateButtonActionPerformed(evt);
    }//GEN-LAST:event_xPathExpressionTextFieldActionPerformed

    private void xPathExpressionTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_xPathExpressionTextFieldFocusGained
        if(xPathExpressionTextField.getText().equalsIgnoreCase(
                org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.xPathExpressionTextField.text")))
            xPathExpressionTextField.setText("");
    }//GEN-LAST:event_xPathExpressionTextFieldFocusGained

    private void xPathExpressionTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_xPathExpressionTextFieldFocusLost
        if(xPathExpressionTextField.getText().isEmpty()){
            this.entry.setxPathExpression("");
            xPathExpressionTextField.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.xPathExpressionTextField.text"));
        }else{
            this.entry.setxPathExpression(xPathExpressionTextField.getText());
        }
    }//GEN-LAST:event_xPathExpressionTextFieldFocusLost

    private void xPathReturnTypeComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xPathReturnTypeComboActionPerformed
        switch (xPathReturnTypeCombo.getSelectedIndex()) {
            case 0:
                // xpath.string
                this.entry.setIcon(org.jdesktop.application.Application.getInstance(org.emje.treehtmlparse.TreeHTMLParseApp.class).
                        getContext().
                        getResourceMap(org.emje.treehtmlparse.TreeHTMLParseView.class).
                        getIcon("XPathComponentItems.entry-xstring"));
                this.entry.setExpressionType(org.emje.treehtmlparse.xpathtree.nodes.XPathTreeEntryNode.XPATH_STRING_ENTRY);
                expressionLabel.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.expressionLabel.text"));
                resultScrollPane.setVisible(true);
                xPathEvaluateButton.setVisible(true);
                normalizedLabel1.setVisible(false);
                normalizedLabel2.setVisible(false);
                break;
            case 1:
                // xpath.node
                this.entry.setIcon(org.jdesktop.application.Application.getInstance(org.emje.treehtmlparse.TreeHTMLParseApp.class).
                        getContext().
                        getResourceMap(org.emje.treehtmlparse.TreeHTMLParseView.class).
                        getIcon("XPathComponentItems.entry-xnode"));
                this.entry.setExpressionType(org.emje.treehtmlparse.xpathtree.nodes.XPathTreeEntryNode.XPATH_NODE_ENTRY);
                expressionLabel.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.expressionLabel.text"));
                resultScrollPane.setVisible(true);
                xPathEvaluateButton.setVisible(true);
                normalizedLabel1.setVisible(false);
                normalizedLabel2.setVisible(false);
                break;
            case 2:
                // xpath.nodeset
                this.entry.setIcon(org.jdesktop.application.Application.getInstance(org.emje.treehtmlparse.TreeHTMLParseApp.class).
                        getContext().
                        getResourceMap(org.emje.treehtmlparse.TreeHTMLParseView.class).
                        getIcon("XPathComponentItems.entry-xnodeset"));
                this.entry.setExpressionType(org.emje.treehtmlparse.xpathtree.nodes.XPathTreeEntryNode.XPATH_NODESET_ENTRY);
                expressionLabel.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.expressionLabel.text"));
                resultScrollPane.setVisible(true);
                xPathEvaluateButton.setVisible(true);
                normalizedLabel1.setVisible(false);
                normalizedLabel2.setVisible(false);
                break;
            case 3:
                // xpath.number
                this.entry.setIcon(org.jdesktop.application.Application.getInstance(org.emje.treehtmlparse.TreeHTMLParseApp.class).
                        getContext().
                        getResourceMap(org.emje.treehtmlparse.TreeHTMLParseView.class).
                        getIcon("XPathComponentItems.entry-xnumber"));
                this.entry.setExpressionType(org.emje.treehtmlparse.xpathtree.nodes.XPathTreeEntryNode.XPATH_NUMBER_ENTRY);
                expressionLabel.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.expressionLabel.text"));
                resultScrollPane.setVisible(true);
                xPathEvaluateButton.setVisible(true);
                normalizedLabel1.setVisible(false);
                normalizedLabel2.setVisible(false);
                break;
            case 4:
                // xpath.boolean
                this.entry.setIcon(org.jdesktop.application.Application.getInstance(org.emje.treehtmlparse.TreeHTMLParseApp.class).
                        getContext().
                        getResourceMap(org.emje.treehtmlparse.TreeHTMLParseView.class).
                        getIcon("XPathComponentItems.entry-xboolean"));
                this.entry.setExpressionType(org.emje.treehtmlparse.xpathtree.nodes.XPathTreeEntryNode.XPATH_BOOLEAN_ENTRY);
                expressionLabel.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.expressionLabel.text"));
                resultScrollPane.setVisible(true);
                xPathEvaluateButton.setVisible(true);
                normalizedLabel1.setVisible(false);
                normalizedLabel2.setVisible(false);
                break;
            case 5:
                // xpath.string.normalized
                this.entry.setIcon(org.jdesktop.application.Application.getInstance(org.emje.treehtmlparse.TreeHTMLParseApp.class).
                        getContext().
                        getResourceMap(org.emje.treehtmlparse.TreeHTMLParseView.class).
                        getIcon("XPathComponentItems.entry-xstring-normalized"));
                this.entry.setExpressionType(org.emje.treehtmlparse.xpathtree.nodes.XPathTreeEntryNode.XPATH_NORMALIZED_STRING_ENTRY);
                expressionLabel.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.expressionLabel.text"));
                resultScrollPane.setVisible(true);
                xPathEvaluateButton.setVisible(true);
                normalizedLabel1.setVisible(true);
                normalizedLabel2.setVisible(true);
                break;
            case 6:
                // xpath.outlink.nodeset
                this.entry.setIcon(org.jdesktop.application.Application.getInstance(org.emje.treehtmlparse.TreeHTMLParseApp.class).
                        getContext().
                        getResourceMap(org.emje.treehtmlparse.TreeHTMLParseView.class).
                        getIcon("XPathComponentItems.entry-xnodeset"));
                this.entry.setExpressionType(org.emje.treehtmlparse.xpathtree.nodes.XPathTreeEntryNode.XPATH_OUTLINK_NODESET_ENTRY);
                expressionLabel.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.expressionLabel.text"));
                resultScrollPane.setVisible(true);
                xPathEvaluateButton.setVisible(true);
                normalizedLabel1.setVisible(false);
                normalizedLabel2.setVisible(false);
                break;
            case 7:
                // plain.string
                this.entry.setIcon(org.jdesktop.application.Application.getInstance(org.emje.treehtmlparse.TreeHTMLParseApp.class).
                        getContext().
                        getResourceMap(org.emje.treehtmlparse.TreeHTMLParseView.class).
                        getIcon("XPathComponentItems.entry-string"));
                this.entry.setExpressionType(org.emje.treehtmlparse.xpathtree.nodes.XPathTreeEntryNode.STRING_ENTRY);
                xPathEvaluateButton.setVisible(false);
                expressionLabel.setText(org.openide.util.NbBundle.getMessage(XPathEntryItem.class, "XPathEntryItem.expressionLabel.text.string"));
                resultScrollPane.setEnabled(false);
                normalizedLabel1.setVisible(false);
                normalizedLabel2.setVisible(false);
                break;            
        }
        this.xPathTree.getModel().valueForPathChanged(this.xPathTree.getSelectionPath(), this.entry);
    }//GEN-LAST:event_xPathReturnTypeComboActionPerformed

    private void xPathExpressionTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_xPathExpressionTextFieldKeyTyped
        if(Character.isISOControl(evt.getKeyChar())){
            this.entry.setxPathExpression(xPathExpressionTextField.getText());
        } else {
            this.entry.setxPathExpression(xPathExpressionTextField.getText()+evt.getKeyChar());
        }
        this.xPathTree.getModel().valueForPathChanged(this.xPathTree.getSelectionPath(), this.entry);
    }//GEN-LAST:event_xPathExpressionTextFieldKeyTyped

    private void openExpressionCustomEditorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openExpressionCustomEditorButtonActionPerformed
        JFrame mainFrame = TreeHTMLParseApp.getApplication().getMainFrame();
        XPathExpressionCustomEditor xPathExpressionCustomEditor = new XPathExpressionCustomEditor(mainFrame, this);
        xPathExpressionCustomEditor.setLocationRelativeTo(mainFrame);
        TreeHTMLParseApp.getApplication().show(xPathExpressionCustomEditor);
    }//GEN-LAST:event_openExpressionCustomEditorButtonActionPerformed

    public HtmlParse getParser() {
        return parser;
    }

    public void setParser(HtmlParse parser) {
        this.parser = parser;
    }

    public void setXPathTree(javax.swing.JTree xPathTree){
        this.xPathTree = xPathTree;
    }

    private void applyOutlinksNodeSetTableModel(){
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "URL", "Anchor"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
    }

    private void applyNodeSetTableModel(){
        resultTable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "Value"
                }) {

            Class[] types = new Class[]{
                java.lang.String.class
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
    }

    protected javax.swing.JTextField getXPathExpressionTextField(){
        return this.xPathExpressionTextField;
    }

    protected void setXPathExpressionText(String expression){
        xPathExpressionTextField.setText(expression);
        this.entry.setxPathExpression(xPathExpressionTextField.getText());
        this.xPathTree.getModel().valueForPathChanged(this.xPathTree.getSelectionPath(), this.entry);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel expressionLabel;
    private javax.swing.JLabel normalizedLabel1;
    private javax.swing.JLabel normalizedLabel2;
    private javax.swing.JButton openExpressionCustomEditorButton;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTable resultTable;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JButton xPathEvaluateButton;
    private javax.swing.JTextField xPathExpressionTextField;
    private javax.swing.JComboBox xPathReturnTypeCombo;
    // End of variables declaration//GEN-END:variables

    private XPathTreeEntryNode entry;
    private javax.swing.JTree xPathTree;
}
