/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the  "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author Ammar Shadiq
 *
 */

package org.emje.treehtmlparse.preferences;

import org.emje.treehtmlparse.xpathtree.nodes.XPathTreeConfigNode;

public class Preferences extends javax.swing.JDialog {

    /** Creates new form Preferences */
    public Preferences(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public Preferences(java.awt.Frame parent, XPathTreeConfigNode config) {
        super(parent);
        this.config = config;
        this.parser = config.getParser();
        initComponents();
        if(parser.equalsIgnoreCase("html2xhtml")){
            this.html2xhtmlParserRadioButton.setSelected(true);
            this.tagsoupParserRadioButton.setSelected(false);
        } else if (parser.equalsIgnoreCase("tagsoup")){
            this.html2xhtmlParserRadioButton.setSelected(false);
            this.tagsoupParserRadioButton.setSelected(true);
        } else {
            this.html2xhtmlParserRadioButton.setSelected(true);
            this.tagsoupParserRadioButton.setSelected(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        html2xhtmlParserRadioButton = new javax.swing.JRadioButton();
        tagsoupParserRadioButton = new javax.swing.JRadioButton();
        parserLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        buttonGroup1.add(html2xhtmlParserRadioButton);
        html2xhtmlParserRadioButton.setSelected(true);
        html2xhtmlParserRadioButton.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.html2xhtmlParserRadioButton.text")); // NOI18N
        html2xhtmlParserRadioButton.setName("html2xhtmlParserRadioButton"); // NOI18N

        buttonGroup1.add(tagsoupParserRadioButton);
        tagsoupParserRadioButton.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.tagsoupParserRadioButton.text")); // NOI18N
        tagsoupParserRadioButton.setName("tagsoupParserRadioButton"); // NOI18N

        parserLabel.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.parserLabel.text")); // NOI18N
        parserLabel.setName("parserLabel"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        cancelButton.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText(org.openide.util.NbBundle.getMessage(Preferences.class, "Preferences.okButton.text")); // NOI18N
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(parserLabel)
                                    .addComponent(html2xhtmlParserRadioButton)
                                    .addComponent(tagsoupParserRadioButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(okButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(cancelButton))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(parserLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(html2xhtmlParserRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tagsoupParserRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        this.parser = null;
        if(this.html2xhtmlParserRadioButton.isSelected()) {
            config.setParser("html2xhtml");
        } else if (this.tagsoupParserRadioButton.isSelected()) {
            config.setParser("tagsoup");
        }
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.restoreData();
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    public void backupDataBeforeEdit() {
        // backUp current state
        if(this.html2xhtmlParserRadioButton.isSelected()) {
            this.parser = "html2xhtml";
        } else if (this.tagsoupParserRadioButton.isSelected()) {
            this.parser = "tagsoup";
        }
    }

    private void restoreData(){
        if(parser.equalsIgnoreCase("html2xhtml")){
            this.html2xhtmlParserRadioButton.setSelected(true);
            this.tagsoupParserRadioButton.setSelected(false);
        } else if (parser.equalsIgnoreCase("tagsoup")){
            this.html2xhtmlParserRadioButton.setSelected(false);
            this.tagsoupParserRadioButton.setSelected(true);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton html2xhtmlParserRadioButton;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel parserLabel;
    private javax.swing.JRadioButton tagsoupParserRadioButton;
    // End of variables declaration//GEN-END:variables


    private XPathTreeConfigNode config;
    private String parser;
}
